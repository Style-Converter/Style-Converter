package app.parsing.css.styles

import app.PropertyIR
import kotlinx.serialization.json.JsonObject

fun parseBordersAndOutlines(styles: JsonObject, acc: MutableList<PropertyIR>): MutableList<PropertyIR> {
	val parsers: List<(JsonObject, MutableList<PropertyIR>) -> MutableList<PropertyIR>> = listOf(
		::parseBorder,
		::parseBorderWidth,
		::parseBorderStyle,
		::parseBorderColor,
		::parseBorderTop,
		::parseBorderRight,
		::parseBorderBottom,
		::parseBorderLeft,
		::parseBorderTopWidth,
		::parseBorderTopStyle,
		::parseBorderTopColor,
		::parseBorderRightWidth,
		::parseBorderRightStyle,
		::parseBorderRightColor,
		::parseBorderBottomWidth,
		::parseBorderBottomStyle,
		::parseBorderBottomColor,
		::parseBorderLeftWidth,
		::parseBorderLeftStyle,
		::parseBorderLeftColor,
		::parseBorderBlock,
		::parseBorderBlockWidth,
		::parseBorderBlockStyle,
		::parseBorderBlockColor,
		::parseBorderBlockEnd,
		::parseBorderBlockEndWidth,
		::parseBorderBlockEndStyle,
		::parseBorderBlockEndColor,
		::parseBorderBlockStart,
		::parseBorderBlockStartWidth,
		::parseBorderBlockStartStyle,
		::parseBorderBlockStartColor,
		::parseBorderRadius,
		::parseBorderTopLeftRadius,
		::parseBorderTopRightRadius,
		::parseBorderBottomRightRadius,
		::parseBorderBottomLeftRadius,
		::parseBorderStartStartRadius,
		::parseBorderStartEndRadius,
		::parseBorderEndStartRadius,
		::parseBorderEndEndRadius,
		::parseBorderInline,
		::parseBorderInlineWidth,
		::parseBorderInlineStyle,
		::parseBorderInlineColor,
		::parseBorderInlineEnd,
		::parseBorderInlineEndWidth,
		::parseBorderInlineEndStyle,
		::parseBorderInlineEndColor,
		::parseBorderInlineStart,
		::parseBorderInlineStartWidth,
		::parseBorderInlineStartStyle,
		::parseBorderInlineStartColor,
		::parseBorderCollapse,
		::parseBorderSpacing,
		::parseBorderImage,
		::parseBorderImageSource,
		::parseBorderImageSlice,
		::parseBorderImageWidth,
		::parseBorderImageOutset,
		::parseBorderImageRepeat,
		::parseOutline,
		::parseOutlineWidth,
		::parseOutlineStyle,
		::parseOutlineColor,
		::parseBoxShadow,
	)
	var next = acc
	for (p in parsers) next = p(styles, next)
	return next
}